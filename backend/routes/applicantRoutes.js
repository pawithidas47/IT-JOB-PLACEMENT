const express = require("express");
const router = express.Router();
const db = require("../models/db");
const multer = require("multer");

// üì¶ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) => cb(null, Date.now() + "-" + file.originalname),
});
const upload = multer({ storage });

/** ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ */
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  try {
    const [user] = await db.promise().query(
      "SELECT * FROM applicants WHERE applicant_id = ?", [id]
    );
    const [skills] = await db.promise().query(
      `SELECT s.skill_id, s.skill_name FROM skills s
       JOIN user_skills us ON s.skill_id = us.skill_id
       WHERE us.applicant_id = ?`, [id]
    );
    const [portfolios] = await db.promise().query(
      "SELECT * FROM portfolios WHERE applicant_id = ?", [id]
    );

    if (!user.length) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    res.json({ user: user[0], skills, portfolios });
  } catch (err) {
    console.error("‚ùå fetchProfile error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
  }
});

/** ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */
router.post("/:id/upload", upload.single("image"), async (req, res) => {
  const { id } = req.params;
  const imageUrl = `/uploads/${req.file.filename}`;
  try {
    await db.promise().query(
      "UPDATE applicants SET profile_img_url = ? WHERE applicant_id = ?",
      [imageUrl, id]
    );
    res.json({ url: imageUrl });
  } catch (err) {
    console.error("‚ùå Upload image failed:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
  }
});

/** ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bio */
router.put("/:id/bio", async (req, res) => {
  const { id } = req.params;
  const { a_bio } = req.body;
  try {
    await db.promise().query(
      "UPDATE applicants SET a_bio = ? WHERE applicant_id = ?",
      [a_bio, id]
    );
    res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bio ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå Update bio failed:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
  }
});

/** ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ + ‡∏•‡∏ö/‡πÄ‡∏û‡∏¥‡πà‡∏° Portfolio ‡πÉ‡∏´‡∏°‡πà */
router.put("/:id", async (req, res) => {
  const { id } = req.params;
  const {
    a_firstname,
    a_lastname,
    a_faculty,
    a_gender,
    a_birthdate,
    a_contact,
    a_phone,
    a_email,
    portfolios = [] // ‚úÖ fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
  } = req.body;

  try {
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    await db.promise().query(
      `UPDATE applicants SET 
        a_firstname = ?, a_lastname = ?, a_faculty = ?, 
        a_gender = ?, a_birthdate = ?, 
        a_contact = ?, a_phone = ?, a_email = ?
       WHERE applicant_id = ?`,
      [a_firstname, a_lastname, a_faculty, a_gender, a_birthdate, a_contact, a_phone, a_email, id]
    );

    // ‚úÖ ‡∏•‡∏ö portfolio ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await db.promise().query("DELETE FROM portfolios WHERE applicant_id = ?", [id]);

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    for (const url of portfolios) {
      await db.promise().query(
        "INSERT INTO portfolios (applicant_id, portfolio_url) VALUES (?, ?)",
        [id, url]
      );
    }

    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ portfolio ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå Update applicant failed:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
  }
});

/** ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Skills */
router.put("/:id/skills", async (req, res) => {
  const { id } = req.params;
  const { skills } = req.body;

  if (!Array.isArray(skills)) {
    return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  try {
    await db.promise().query("DELETE FROM user_skills WHERE applicant_id = ?", [id]);

    for (const skillName of skills.map(s => s.trim()).filter(Boolean)) {
      let [existing] = await db.promise().query(
        "SELECT skill_id FROM skills WHERE skill_name = ?", [skillName]
      );

      let skillId;
      if (existing.length > 0) {
        skillId = existing[0].skill_id;
      } else {
        const [result] = await db.promise().query(
          "INSERT INTO skills (skill_name) VALUES (?)", [skillName]
        );
        skillId = result.insertId;
      }

      await db.promise().query(
        "INSERT INTO user_skills (applicant_id, skill_id) VALUES (?, ?)", [id, skillId]
      );
    }

    res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå updateSkills error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
  }
});
// ‡πÄ‡∏û‡∏¥‡πà‡∏° route ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô applicantRoutes.js (‡∏´‡∏•‡∏±‡∏á require ‡πÅ‡∏•‡∏∞ router = express.Router())
router.post("/:id/portfolio", async (req, res) => {
  const { id } = req.params;
  const { portfolio_url } = req.body;

  if (!portfolio_url) {
    return res.status(400).json({ message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ portfolio_url" });
  }

  try {
    await db.promise().query(
      "INSERT INTO portfolios (applicant_id, portfolio_url) VALUES (?, ?)",
      [id, portfolio_url]
    );
    res.json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏° portfolio ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏° portfolio ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
  }
});

// ‚úÖ ‡∏•‡∏ö portfolio ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.delete("/:id/portfolio/all", async (req, res) => {
  const { id } = req.params;
  try {
    await db.promise().query(
      "DELETE FROM portfolios WHERE applicant_id = ?",
      [id]
    );
    res.json({ message: "‡∏•‡∏ö portfolio ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (err) {
    console.error("‚ùå ‡∏•‡∏ö portfolio ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
  }
});


module.exports = router;
