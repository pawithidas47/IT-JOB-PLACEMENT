const express = require("express");
const router = express.Router();
const db = require("../models/db");
const multer = require("multer");

// üì¶ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
const storage = multer.diskStorage({
    destination: (req, file, cb) => cb(null, "uploads/"),
    filename: (req, file, cb) => cb(null, Date.now() + "-" + file.originalname),
});
const upload = multer({ storage });


// ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏° bio, skills, portfolios)
router.get("/:id", async (req, res) => {
    const { id } = req.params;
    try {
        const [user] = await db.promise().query(
            "SELECT * FROM applicants WHERE applicant_id = ?",
            [id]
        );
        const [skills] = await db.promise().query(
            `SELECT s.skill_id, s.skill_name FROM skills s
       JOIN user_skills us ON s.skill_id = us.skill_id
       WHERE us.applicant_id = ?`, [id]
        );
        const [portfolios] = await db.promise().query(
            "SELECT * FROM portfolios WHERE applicant_id = ?", [id]
        );

        if (!user.length) return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });

        res.json({ user: user[0], skills, portfolios });
    } catch (err) {
        console.error("‚ùå Error:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
    }
});


// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
router.post("/:id/upload", upload.single("image"), async (req, res) => {
    const { id } = req.params;
    const imageUrl = `/uploads/${req.file.filename}`;
    await db.promise().query(
        "UPDATE applicants SET profile_img_url = ? WHERE applicant_id = ?",
        [imageUrl, id]
    );
    res.json({ url: imageUrl });
});


// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï bio
router.put("/:id/bio", async (req, res) => {
    const { id } = req.params;
    const { a_bio } = req.body;

    try {
        await db.promise().query(
            "UPDATE applicants SET a_bio = ? WHERE applicant_id = ?",
            [a_bio, id]
        );
        res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bio ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (err) {
        console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Bio ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
    }
});


// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô portfolio ‡πÉ‡∏´‡∏°‡πà
router.post("/:id/portfolio", async (req, res) => {
    const { id } = req.params;
    const { portfolio_url } = req.body;

    try {
        await db.promise().query(
            "INSERT INTO portfolios (applicant_id, portfolio_url) VALUES (?, ?)",
            [id, portfolio_url]
        );
        res.json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (err) {
        console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏° portfolio ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
    }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô (Portfolio)
router.post("/:id/portfolio", async (req, res) => {
    const { id } = req.params;
    const { portfolio_url } = req.body;

    try {
        await db.promise().query(
            "INSERT INTO portfolios (applicant_id, portfolio_url) VALUES (?, ?)",
            [id, portfolio_url]
        );
        res.json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (err) {
        console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏° portfolio ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err });
    }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
router.put("/:id/skills", async (req, res) => {
    const { id } = req.params;
    const { skills } = req.body;

    try {
        if (!Array.isArray(skills)) {
            return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤
        await db.promise().query("DELETE FROM user_skills WHERE applicant_id = ?", [id]);

        for (const skillName of skills) {
            const trimmed = skillName.trim();
            if (!trimmed) continue;

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° skill
            let [existing] = await db.promise().query(
                "SELECT skill_id FROM skills WHERE skill_name = ?",
                [trimmed]
            );

            let skillId;
            if (existing.length > 0) {
                skillId = existing[0].skill_id;
            } else {
                const [result] = await db.promise().query(
                    "INSERT INTO skills (skill_name) VALUES (?)",
                    [trimmed]
                );
                skillId = result.insertId;
            }

            // ‡∏ú‡∏π‡∏Å skill ‡∏Å‡∏±‡∏ö applicant
            await db.promise().query(
                "INSERT INTO user_skills (applicant_id, skill_id) VALUES (?, ?)",
                [id, skillId]
            );
        }

        res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (err) {
        console.error("‚ùå updateSkills error:", err);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error: err.message });
    }
});


module.exports = router;
